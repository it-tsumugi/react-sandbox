{"version":3,"sources":["assets/data/pathData.ts","components/organisms/ReduxHeader.tsx","store/hooks.ts","store/slices/counter/counterSlice.ts","components/pages/ReduxPage1.tsx","components/pages/ReduxPage2.tsx","components/pages/Top.tsx","components/pages/FireBasePage1.tsx","components/organisms/TopHeader.tsx","router/ComponentRouter.tsx","store/store.ts","App.tsx","index.tsx"],"names":["pathData","ReduxHeader","to","useAppSelector","useSelector","useAppDispatch","useDispatch","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","useCountSelector","count","counter","counterReducer","reducer","ReduxPage1","dispatch","useState","incrementAmount","setIncrementAmount","onClick","onChange","e","Number","target","ReduxPage2","Top","FireBasePage1","userName","setUserName","dbRef","ref","getDatabase","get","child","then","snapshot","exists","console","log","val","catch","error","placeholder","set","db","username","TopHeader","ComponentRouter","exact","path","pathname","store","configureStore","App","SComponentContainer","styled","div","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b27d917.chunk.js","sourcesContent":["export const pathData = {\n    top: \"/top\",\n\n    redux: \"redux\",\n    reduxPage1: \"/redux-page1\",\n    reduxPage2: \"/redux-page2\",\n\n    fireBasePage1: \"/fire-base-page1\",\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const ReduxHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n            <Link to={pathData.reduxPage1}>Page1</Link>\n            <Link to={pathData.reduxPage2}>Page2</Link>\n        </>\n    );\n};\n","import { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./reduxType\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { counterType, RootState } from \"../../reduxType\";\nimport { useAppSelector } from \"../../hooks\";\n\nconst initialState: counterType = {\n    value: 0,\n    status: \"idle\",\n};\n\nexport const counterSlice = createSlice({\n    name: \"counter\",\n    initialState: initialState,\n    reducers: {\n        increment: (state) => {\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action: PayloadAction<number>) => {\n            state.value += action.payload;\n        },\n    },\n});\n\n//action\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n//selector\n//インテリセンスを利用したい、インポートを少なくしたいという理由からhooksを作成\nexport const useCountSelector = () => {\n    const count = useAppSelector((state: RootState) => state.counter.value);\n    return { count };\n};\n\n//reducer\nexport const counterReducer = counterSlice.reducer;\n","import { useState, VFC } from \"react\";\n\nimport { useAppDispatch } from \"../../store/hooks\";\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    useCountSelector,\n} from \"../../store/slices/counter/counterSlice\";\n\nexport const ReduxPage1: VFC = () => {\n    const dispatch = useAppDispatch();\n    const { count } = useCountSelector();\n    const [incrementAmount, setIncrementAmount] = useState(2);\n\n    return (\n        <>\n            <div>Page1</div>\n            <button onClick={() => dispatch(increment())}>\n                インクリメント\n            </button>\n            <button onClick={() => dispatch(decrement())}>デクリメント</button>\n            <input\n                value={incrementAmount}\n                onChange={(e) => setIncrementAmount(Number(e.target.value))}\n            />\n            <button\n                onClick={() => dispatch(incrementByAmount(incrementAmount))}\n            >\n                数値分インクリメント\n            </button>\n            <div>{count}</div>\n        </>\n    );\n};\n","import { useState, VFC } from \"react\";\nimport { useAppDispatch } from \"../../store/hooks\";\n\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    useCountSelector,\n} from \"../../store/slices/counter/counterSlice\";\n\nexport const ReduxPage2: VFC = () => {\n    const dispatch = useAppDispatch();\n    const { count } = useCountSelector();\n    const [incrementAmount, setIncrementAmount] = useState(2);\n\n    return (\n        <>\n            <div>Page2</div>\n            <button onClick={() => dispatch(increment())}>\n                インクリメント\n            </button>\n            <button onClick={() => dispatch(decrement())}>デクリメント</button>\n            <input\n                value={incrementAmount}\n                onChange={(e) => setIncrementAmount(Number(e.target.value))}\n            />\n            <button\n                onClick={() => dispatch(incrementByAmount(incrementAmount))}\n            >\n                数値分インクリメント\n            </button>\n            <div>{count}</div>\n        </>\n    );\n};\n","import { VFC } from \"react\";\n\nexport const Top: VFC = () => {\n    return <div>Top</div>;\n};\n","import { child, get, ref, set, getDatabase } from \"firebase/database\";\nimport { useState, VFC } from \"react\";\nimport { db } from \"../../index\";\n\nexport const FireBasePage1: VFC = () => {\n    const [userName, setUserName] = useState(\"\");\n    const dbRef = ref(getDatabase());\n    get(child(dbRef, `users`))\n        .then((snapshot) => {\n            if (snapshot.exists()) {\n                console.log(snapshot.val());\n            } else {\n                console.log(\"No data available\");\n            }\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n    return (\n        <>\n            <div>Page1</div>\n            <input\n                onChange={(e) => setUserName(e.target.value)}\n                placeholder=\"ユーザー名を入力してください\"\n            ></input>\n            <button\n                onClick={() => {\n                    set(ref(db, \"users/\"), {\n                        username: userName,\n                    });\n                }}\n            >\n                データ追加\n            </button>\n        </>\n    );\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const TopHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n            <Link to={pathData.reduxPage1}>Redux</Link>\n            <Link to={pathData.fireBasePage1}>FireBase</Link>\n        </>\n    );\n};\n","import { VFC } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { ReduxHeader } from \"../components/organisms/ReduxHeader\";\nimport { ReduxPage1 } from \"../components/pages/ReduxPage1\";\nimport { ReduxPage2 } from \"../components/pages/ReduxPage2\";\n\nimport { pathData } from \"../assets/data/pathData\";\nimport { Top } from \"../components/pages/Top\";\nimport { FireBasePage1 } from \"../components/pages/FireBasePage1\";\nimport { TopHeader } from \"../components/organisms/TopHeader\";\n\nexport const ComponentRouter: VFC = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path={pathData.top}>\n                    <TopHeader />\n                    <Top />\n                </Route>\n                <Route path={pathData.fireBasePage1}>\n                    <FireBasePage1 />\n                </Route>\n                <Route path={pathData.reduxPage1}>\n                    <ReduxHeader />\n                    <ReduxPage1 />\n                </Route>\n                <Route path={pathData.reduxPage2}>\n                    <ReduxHeader />\n                    <ReduxPage2 />\n                </Route>\n                <Route path=\"*\">\n                    <Redirect to={{ pathname: pathData.top }} />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { counterReducer } from \"./slices/counter/counterSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        counter: counterReducer,\n    },\n});\n","import { VFC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { ComponentRouter } from \"./router/ComponentRouter\";\nimport { store } from \"./store/store\";\n\nexport const App: VFC = () => {\n    return (\n        <SComponentContainer>\n            <Provider store={store}>\n                <ComponentRouter />\n            </Provider>\n        </SComponentContainer>\n    );\n};\n\nconst SComponentContainer = styled.div`\n    background-color: skyblue;\n    min-height: 100vh;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport { getDatabase } from \"firebase/database\";\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCLifYdh2b-V9WzIK1X3cL9gRoI_q5UC24\",\n    authDomain: \"chat-app-86125.firebaseapp.com\",\n    databaseURL:\n        \"https://chat-app-86125-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"chat-app-86125\",\n    storageBucket: \"chat-app-86125.appspot.com\",\n    messagingSenderId: \"717771492231\",\n    appId: \"1:717771492231:web:4019216ccf20fc5052e122\",\n    measurementId: \"G-BQCX5GM9PP\",\n};\n\n// Initialize Firebase\n// const app =\ninitializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\nexport const db = getDatabase();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}