{"version":3,"sources":["assets/data/pathData.ts","components/organisms/ReduxHeader.tsx","store/hooks.ts","store/slices/counterSlice.ts","components/pages/ReduxPage1.tsx","components/pages/ReduxPage2.tsx","components/pages/Top.tsx","components/organisms/FireBase/FirebaseActionArea.tsx","function/login.ts","function/addUser.ts","store/slices/chatDataSlice.ts","components/organisms/FireBase/FirebaseChatDisplayArea.tsx","hooks/useFetchData.ts","components/pages/FireBasePage1.tsx","components/organisms/TopHeader.tsx","components/organisms/FireBase/FireBaseHeader.tsx","router/ComponentRouter.tsx","store/store.ts","App.tsx","index.tsx","config.ts"],"names":["pathData","ReduxHeader","to","useAppSelector","useSelector","useAppDispatch","useDispatch","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","useCountSelector","count","counter","counterReducer","reducer","ReduxPage1","dispatch","useState","incrementAmount","setIncrementAmount","onClick","onChange","e","Number","target","ReduxPage2","Top","FirebaseActionArea","userName","setUserName","text","setText","isLogin","setIsLogin","SActionArea","SUserName","SUserNameText","SUserNameInput","placeholder","SLoginButton","props","length","window","alert","login","SText","STextInput","SButton","postData","user_name","createAt","moment","format","dbRef","ref","db","push","addUser","SDbUserName","SDbText","SDbTimestamp","styled","div","input","button","chatDataSlice","setChatData","chatDataReducer","FirebaseChatDisplayArea","chatData","useEffect","chatRef","onValue","snapshot","console","log","exists","dbData","val","bufChatData","Object","entries","map","key","useFetchData","SChatListContainer","CircularProgress","item","index","SChatContainer","style","order","SContent","fromNow","FireBasePage1","locale","SComponentContainer","TopHeader","FireBaseHeader","ComponentRouter","basename","process","exact","path","pathname","store","configureStore","App","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getDatabase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.206b2b53.chunk.js","sourcesContent":["export const pathData = {\n    top: \"/top\",\n\n    redux: \"redux\",\n    reduxPage1: \"/redux-page1\",\n    reduxPage2: \"/redux-page2\",\n\n    fireBasePage1: \"/fire-base-page1\",\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const ReduxHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n            <Link to={pathData.reduxPage1}>Page1</Link>\n            <Link to={pathData.reduxPage2}>Page2</Link>\n        </>\n    );\n};\n","import { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\n\nimport { RootState, AppDispatch } from \"./reduxType\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../reduxType\";\nimport { useAppSelector } from \"../hooks\";\n\ntype counterType = {\n    value: number;\n    status: \"idle\" | \"loading\" | \"failed\";\n};\n\nconst initialState: counterType = {\n    value: 0,\n    status: \"idle\",\n};\n\nexport const counterSlice = createSlice({\n    name: \"counter\",\n    initialState: initialState,\n    reducers: {\n        increment: (state) => {\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action: PayloadAction<number>) => {\n            state.value += action.payload;\n        },\n    },\n});\n\n//action\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n//selector\nexport const useCountSelector = () => {\n    const count = useAppSelector((state: RootState) => state.counter.value);\n    return { count };\n};\n\n//reducer\nexport const counterReducer = counterSlice.reducer;\n","import { useState, VFC } from \"react\";\n\nimport { useAppDispatch } from \"../../store/hooks\";\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    useCountSelector,\n} from \"../../store/slices/counterSlice\";\n\nexport const ReduxPage1: VFC = () => {\n    const dispatch = useAppDispatch();\n    const { count } = useCountSelector();\n    const [incrementAmount, setIncrementAmount] = useState(2);\n\n    return (\n        <>\n            <div>Page1</div>\n            <button onClick={() => dispatch(increment())}>\n                インクリメント\n            </button>\n            <button onClick={() => dispatch(decrement())}>デクリメント</button>\n            <input\n                value={incrementAmount}\n                onChange={(e) => setIncrementAmount(Number(e.target.value))}\n            />\n            <button\n                onClick={() => dispatch(incrementByAmount(incrementAmount))}\n            >\n                数値分インクリメント\n            </button>\n            <div>{count}</div>\n        </>\n    );\n};\n","import { useState, VFC } from \"react\";\nimport { useAppDispatch } from \"../../store/hooks\";\n\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    useCountSelector,\n} from \"../../store/slices/counterSlice\";\n\nexport const ReduxPage2: VFC = () => {\n    const dispatch = useAppDispatch();\n    const { count } = useCountSelector();\n    const [incrementAmount, setIncrementAmount] = useState(2);\n\n    return (\n        <>\n            <div>Page2</div>\n            <button onClick={() => dispatch(increment())}>\n                インクリメント\n            </button>\n            <button onClick={() => dispatch(decrement())}>デクリメント</button>\n            <input\n                value={incrementAmount}\n                onChange={(e) => setIncrementAmount(Number(e.target.value))}\n            />\n            <button\n                onClick={() => dispatch(incrementByAmount(incrementAmount))}\n            >\n                数値分インクリメント\n            </button>\n            <div>{count}</div>\n        </>\n    );\n};\n","import { VFC } from \"react\";\n\nexport const Top: VFC = () => {\n    return <div>Top</div>;\n};\n","import { useState, VFC } from \"react\";\nimport styled from \"styled-components\";\nimport { addUser } from \"../../../function/addUser\";\nimport { login } from \"../../../function/login\";\n\nexport const FirebaseActionArea: VFC = () => {\n    const [userName, setUserName] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [isLogin, setIsLogin] = useState(false);\n\n    return (\n        <SActionArea>\n            <SUserName>ユーザー名</SUserName>\n            {isLogin ? (\n                <SUserNameText>{userName}</SUserNameText>\n            ) : (\n                <>\n                    <SUserNameInput\n                        value={userName}\n                        onChange={(e) => setUserName(e.target.value)}\n                        placeholder=\"ユーザー名を入力してください\"\n                    ></SUserNameInput>\n                    <SLoginButton\n                        onClick={() => login({ setIsLogin, userName })}\n                    >\n                        ログイン\n                    </SLoginButton>\n                </>\n            )}\n            <SText>テキスト</SText>\n            <STextInput\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                placeholder=\"テキストを入力してください\"\n            />\n            <></>\n            <SButton\n                onClick={() => addUser({ userName, text, setText, isLogin })}\n            >\n                データ追加\n            </SButton>\n            <SDbUserName>ユーザー名</SDbUserName>\n            <SDbText>テキスト</SDbText>\n            <SDbTimestamp>作成日時</SDbTimestamp>\n        </SActionArea>\n    );\n};\n\nconst SActionArea = styled.div`\n    display: grid;\n    grid-template-columns: 200px 200px 200px;\n    grid-template-rows: 50px 50px 50px 50px;\n`;\n\nconst SUserName = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n`;\n\nconst SUserNameInput = styled.input`\n    grid-column-start: 2;\n    grid-column-end: 3;\n`;\n\nconst SLoginButton = styled.button`\n    grid-column-start: 3;\n    grid-column-end: 4;\n`;\n\nconst SUserNameText = styled.div`\n    grid-column-start: 2;\n    grid-column-end: 4;\n`;\n\nconst SText = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n`;\n\nconst STextInput = styled.input`\n    grid-column-start: 2;\n    grid-column-end: 4;\n    grid-row-start: 2;\n    grid-row-end: 3;\n`;\n\nconst SButton = styled.button`\n    grid-row-start: 3;\n    grid-row-end: 4;\n`;\n\nconst SDbUserName = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 4;\n    grid-row-end: 5;\n`;\n\nconst SDbText = styled.div`\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 4;\n    grid-row-end: 5;\n`;\n\nconst SDbTimestamp = styled.div`\n    grid-column-start: 3;\n    grid-column-end: 4;\n    grid-row-start: 4;\n    grid-row-end: 5;\n`;\n","type loginType = {\n    setIsLogin: React.Dispatch<React.SetStateAction<boolean>>;\n    userName: string;\n};\n\nexport const login = (props: loginType) => {\n    const { setIsLogin, userName } = props;\n    if (userName.length === 0) {\n        window.alert(\"ユーザー名を入力しないとログイン出来ません\");\n    } else {\n        setIsLogin(true);\n    }\n};\n","import moment from \"moment\";\nimport { push, ref } from \"firebase/database\";\n\nimport { db } from \"../index\";\n\ntype addUserType = {\n    userName: string;\n    text: string;\n    setText: React.Dispatch<React.SetStateAction<string>>;\n    isLogin: boolean;\n};\n\nexport const addUser = (props: addUserType) => {\n    const { userName, text, setText, isLogin } = props;\n    if (isLogin === false) {\n        window.alert(\"ログインしてください\");\n    } else if (text.length === 0) {\n        window.alert(\"テキストを入力してください\");\n    } else {\n        let timestamp = moment();\n        const postData = {\n            user_name: userName,\n            text: text,\n            createAt: timestamp.format(\"YYYY-MM-DD HH:mm:ss\"),\n        };\n        const dbRef = ref(db, \"users/\");\n        push(dbRef, postData);\n        setText(\"\");\n    }\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState, stateStatusType } from \"../reduxType\";\nimport { useAppSelector } from \"../hooks\";\nimport { chatDataType } from \"../../assets/type/dataType\";\n\ntype chatDataStateType = {\n    value: chatDataType[];\n    status: stateStatusType;\n};\n\nconst initialState: chatDataStateType = {\n    value: [],\n    status: \"loading\",\n};\n\nexport const chatDataSlice = createSlice({\n    name: \"chatData\",\n    initialState: initialState,\n    reducers: {\n        setChatData: (state, action: PayloadAction<chatDataType[]>) => {\n            state.value = action.payload;\n            state.status = \"idle\";\n        },\n    },\n});\n\n//reducer\nexport const chatDataReducer = chatDataSlice.reducer;\n\n//action\nexport const { setChatData } = chatDataSlice.actions;\n\n//selector\nexport const useChatDataSelector = () => {\n    const chatData = useAppSelector((state: RootState) => state.chatData);\n    return { chatData };\n};\n","import moment from \"moment\";\nimport { VFC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { CircularProgress } from \"@material-ui/core\";\n\nimport { useFetchData } from \"../../../hooks/useFetchData\";\nimport { useChatDataSelector } from \"../../../store/slices/chatDataSlice\";\n\nexport const FirebaseChatDisplayArea: VFC = () => {\n    const { chatData } = useChatDataSelector();\n    useFetchData();\n    console.log(\"チャット表示領域のレンダリング\");\n\n    return (\n        <SChatListContainer>\n            {chatData.status === \"loading\" ? (\n                <CircularProgress />\n            ) : (\n                chatData.value.map((item, index) => {\n                    return (\n                        <SChatContainer\n                            key={item.key}\n                            style={{ order: -index }}\n                        >\n                            <SContent>{item.value.user_name}</SContent>\n                            <SContent>{item.value.text}</SContent>\n                            <SContent>\n                                {moment(item.value.createAt).fromNow()}\n                            </SContent>\n                        </SChatContainer>\n                    );\n                })\n            )}\n        </SChatListContainer>\n    );\n};\n\nconst SChatListContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst SChatContainer = styled.div`\n    display: flex;\n`;\n\nconst SContent = styled.div`\n    width: 200px;\n`;\n","import { DatabaseReference, onValue, ref } from \"firebase/database\";\nimport { useEffect } from \"react\";\n\nimport { chatDataType, dbDataType } from \"../assets/type/dataType\";\nimport { useAppDispatch } from \"../store/hooks\";\nimport { setChatData } from \"../store/slices/chatDataSlice\";\nimport { db } from \"../index\";\n\nexport const useFetchData = () => {\n    const dispatch = useAppDispatch();\n    useEffect(() => {\n        const chatRef: DatabaseReference = ref(db, \"users\");\n        onValue(chatRef, (snapshot) => {\n            console.log(\"チャットデータの取得\");\n            if (snapshot.exists()) {\n                const dbData = snapshot.val();\n                const bufChatData: chatDataType[] = Object.entries<dbDataType>(\n                    dbData || {}\n                ).map(([key, value]) => ({\n                    key: key,\n                    value: value,\n                }));\n                dispatch(setChatData(bufChatData));\n            } else {\n                console.log(\"データがありません\");\n            }\n        });\n        //dispatchに対して依存配列に入れるように警告がでるのでeslintを無効化\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n};\n","import moment from \"moment\";\nimport { VFC } from \"react\";\nimport styled from \"styled-components\";\nimport \"moment/locale/ja\";\n\nimport { FirebaseActionArea } from \"../organisms/FireBase/FirebaseActionArea\";\nimport { FirebaseChatDisplayArea } from \"../organisms/FireBase/FirebaseChatDisplayArea\";\n\nexport const FireBasePage1: VFC = () => {\n    moment.locale(\"ja\");\n\n    return (\n        <SComponentContainer>\n            <FirebaseActionArea />\n            <FirebaseChatDisplayArea />\n        </SComponentContainer>\n    );\n};\n\nconst SComponentContainer = styled.div`\n    text-align: center;\n`;\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const TopHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n            <Link to={pathData.reduxPage1}>Redux</Link>\n            <Link to={pathData.fireBasePage1}>FireBase</Link>\n        </>\n    );\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../../assets/data/pathData\";\n\nexport const FireBaseHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n        </>\n    );\n};\n","import { VFC } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { ReduxHeader } from \"../components/organisms/ReduxHeader\";\nimport { ReduxPage1 } from \"../components/pages/ReduxPage1\";\nimport { ReduxPage2 } from \"../components/pages/ReduxPage2\";\nimport { Top } from \"../components/pages/Top\";\nimport { FireBasePage1 } from \"../components/pages/FireBasePage1\";\nimport { TopHeader } from \"../components/organisms/TopHeader\";\nimport { FireBaseHeader } from \"../components/organisms/FireBase/FireBaseHeader\";\n\nimport { pathData } from \"../assets/data/pathData\";\n\nexport const ComponentRouter: VFC = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path={pathData.top}>\n                    <TopHeader />\n                    <Top />\n                </Route>\n                <Route path={pathData.fireBasePage1}>\n                    <FireBaseHeader />\n                    <FireBasePage1 />\n                </Route>\n                <Route path={pathData.reduxPage1}>\n                    <ReduxHeader />\n                    <ReduxPage1 />\n                </Route>\n                <Route path={pathData.reduxPage2}>\n                    <ReduxHeader />\n                    <ReduxPage2 />\n                </Route>\n                <Route path=\"*\">\n                    <Redirect to={{ pathname: pathData.top }} />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { chatDataReducer } from \"./slices/chatDataSlice\";\nimport { counterReducer } from \"./slices/counterSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        counter: counterReducer,\n        chatData: chatDataReducer,\n    },\n});\n","import { VFC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { ComponentRouter } from \"./router/ComponentRouter\";\nimport { store } from \"./store/store\";\n\nexport const App: VFC = () => {\n    return (\n        <SComponentContainer>\n            <Provider store={store}>\n                <ComponentRouter />\n            </Provider>\n        </SComponentContainer>\n    );\n};\n\nconst SComponentContainer = styled.div`\n    background-color: skyblue;\n    min-height: 100vh;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport { getDatabase } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport { firebaseConfig } from \"./config\";\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nexport const db = getDatabase();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyCLifYdh2b-V9WzIK1X3cL9gRoI_q5UC24\",\n    authDomain: \"chat-app-86125.firebaseapp.com\",\n    databaseURL:\n        \"https://chat-app-86125-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"chat-app-86125\",\n    storageBucket: \"chat-app-86125.appspot.com\",\n    messagingSenderId: \"717771492231\",\n    appId: \"1:717771492231:web:4019216ccf20fc5052e122\",\n    measurementId: \"G-BQCX5GM9PP\",\n};\n"],"sourceRoot":""}