{"version":3,"sources":["assets/data/pathData.ts","components/organisms/ReduxHeader.tsx","hooks/useAppDispatch.ts","hooks/useAppSelector.ts","store/slices/counterSlice.ts","components/pages/ReduxPage1.tsx","components/pages/ReduxPage2.tsx","components/pages/Top.tsx","functions/handler/addSeedData.ts","store/slices/latestChatOrderSlice.ts","components/organisms/FireBase/FirebaseActionArea.tsx","functions/handler/login.ts","functions/handler/addChat.ts","functions/handler/deleteAllChats.ts","store/slices/chatDataSlice.ts","functions/features/chatData/convertChatData.ts","store/slices/isChatsCompletedSlice.ts","store/slices/hasMoreSlice.ts","store/slices/lastChatOrderSlice.ts","assets/data/constNum.ts","components/organisms/FireBase/FirebaseChatDisplayArea.tsx","hooks/useFetchData.ts","functions/handler/loadMore.ts","components/pages/FireBasePage1.tsx","components/organisms/TopHeader.tsx","store/slices/userData.ts","components/pages/ReduxThunkPage1.tsx","components/organisms/GoToTopHeader.tsx","router/ComponentRouter.tsx","store/store.ts","App.tsx","index.tsx","config.ts","functions/getChatRef.ts"],"names":["pathData","ReduxHeader","to","useAppDispatch","dispatch","useDispatch","useAppSelector","useSelector","counterSlice","createSlice","name","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","useCountSelector","count","counter","counterReducer","reducer","ReduxPage1","useState","incrementAmount","setIncrementAmount","onClick","value","onChange","e","Number","target","ReduxPage2","Top","addSeedData","timestamp","moment","seedData","i","strNum","user_name","text","createdAt","format","order","set","chatRef","latestChatOrderSlice","START_CHAT_ORDER","setLatestChatOrder","latestChatOrderReducer","FirebaseActionArea","userName","setUserName","setText","isLogin","setIsLogin","latestChatOrder","SActionArea","SUserName","SUserNameText","SUserNameInput","placeholder","SLoginButton","props","length","window","alert","login","SText","STextInput","SAddButton","postData","push","addChat","SAddSeedDataButton","SDeleteAllButton","catch","error","console","log","SDbUserName","SDbText","SDbTimestamp","SDbOrder","styled","div","input","button","chatDataSlice","setChatData","chatDataReducer","convertChatData","dbChatData","bufChatData","Object","entries","map","key","reversedBufChatData","reverse","newBufChatData","chat","index","isChatsCompletedSlice","setIsChatsCompleted","isChatsCompletedReducer","hasMoreSlice","setHasMore","hasMoreReducer","lastChatOrderSlice","setLastChatOrder","lastChatOrderReducer","FirebaseChatDisplayArea","chatData","hasMore","isChatsCompleted","lastChatOrder","chatQuery","query","orderByChild","limitToLast","useEffect","onValue","snapshot","newChatData","val","lastChatData","useFetchData","SChatListContainer","loadMore","endBefore","LOAD_CHAT_NUM","onlyOnce","loader","CircularProgress","initialLoad","threshold","item","SChatContainer","SContent","fromNow","FireBasePage1","locale","SComponentContainer","TopHeader","SComponentContaier","userDataSlice","setUsers","userDataReducer","ReduxThunkPage1","userData","a","fetch","res","json","data","user","GoToTopHeader","ComponentRouter","basename","process","exact","path","pathname","store","configureStore","middleware","thunk","App","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","ref","getChatRef","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef83ac75.chunk.js","sourcesContent":["export const pathData = {\n  top: \"/top\",\n\n  redux: \"redux\",\n  reduxPage1: \"/redux-page1\",\n  reduxPage2: \"/redux-page2\",\n  reduxThunkPage1: \"/redux-thunk-page1\",\n  fireBasePage1: \"/fire-base-page1\",\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const ReduxHeader: VFC = () => {\n  return (\n    <>\n      <Link to={pathData.top}>Top</Link>\n      <Link to={pathData.reduxPage1}>Page1</Link>\n      <Link to={pathData.reduxPage2}>Page2</Link>\n    </>\n  );\n};\n","import { AppThunkDispatch } from \"../assets/type/reduxType\";\nimport { useDispatch } from \"react-redux\";\n\nexport const useAppDispatch = () => {\n  const dispatch = useDispatch<AppThunkDispatch>();\n  return { dispatch };\n};\n","import { useSelector } from \"react-redux\";\nimport { TypedUseSelectorHook } from \"react-redux\";\n\nimport { RootState } from \"../assets/type/reduxType\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: number = 0;\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment: (state) => {\n      state += 1;\n    },\n    decrement: (state) => {\n      state -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state += action.payload;\n    },\n  },\n});\n\n//action\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n//selector\nexport const useCountSelector = () => {\n  const count = useAppSelector((state: RootState) => state.counter);\n  return { count };\n};\n\n//reducer\nexport const counterReducer = counterSlice.reducer;\n","import { useState, VFC } from \"react\";\n\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  useCountSelector,\n} from \"../../store/slices/counterSlice\";\n\nexport const ReduxPage1: VFC = () => {\n  const { dispatch } = useAppDispatch();\n  const { count } = useCountSelector();\n  const [incrementAmount, setIncrementAmount] = useState(2);\n\n  return (\n    <>\n      <div>Page1</div>\n      <button onClick={() => dispatch(increment())}>インクリメント</button>\n      <button onClick={() => dispatch(decrement())}>デクリメント</button>\n      <input\n        value={incrementAmount}\n        onChange={(e) => setIncrementAmount(Number(e.target.value))}\n      />\n      <button onClick={() => dispatch(incrementByAmount(incrementAmount))}>\n        数値分インクリメント\n      </button>\n      <div>{count}</div>\n    </>\n  );\n};\n","import { useState, VFC } from \"react\";\n\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  useCountSelector,\n} from \"../../store/slices/counterSlice\";\n\nexport const ReduxPage2: VFC = () => {\n  const { dispatch } = useAppDispatch();\n  const { count } = useCountSelector();\n  const [incrementAmount, setIncrementAmount] = useState(2);\n\n  return (\n    <>\n      <div>Page2</div>\n      <button onClick={() => dispatch(increment())}>インクリメント</button>\n      <button onClick={() => dispatch(decrement())}>デクリメント</button>\n      <input\n        value={incrementAmount}\n        onChange={(e) => setIncrementAmount(Number(e.target.value))}\n      />\n      <button onClick={() => dispatch(incrementByAmount(incrementAmount))}>\n        数値分インクリメント\n      </button>\n      <div>{count}</div>\n    </>\n  );\n};\n","import { VFC } from \"react\";\n\nexport const Top: VFC = () => {\n    return <div>Top</div>;\n};\n","import moment from \"moment\";\nimport { set } from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\nimport { dbChatDataType } from \"../../assets/type/dataType\";\n\nexport const addSeedData = () => {\n  let timestamp = moment();\n  let seedData: dbChatDataType[] = [];\n\n  for (let i = 0; i < 60; i++) {\n    let strNum: string = \"\";\n    if (i < 10) strNum = \"0\" + i;\n    else strNum = `${i}`;\n\n    seedData[i] = {\n      user_name: \"つむぎ\",\n      text: `${i + 1}`,\n      createdAt: timestamp.format(`YYYY-MM-DD HH:mm:${strNum}`),\n      order: i + 1,\n    };\n  }\n  set(chatRef, seedData);\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { START_CHAT_ORDER } from \"../../assets/data/constNum\";\n\nconst initialState: number = START_CHAT_ORDER - 1;\n\nexport const latestChatOrderSlice = createSlice({\n  name: \"latestChatOrder\",\n  initialState: initialState,\n  reducers: {\n    setLatestChatOrder: (state, action: PayloadAction<number>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const latestChatOrderReducer = latestChatOrderSlice.reducer;\n\n//action\nexport const { setLatestChatOrder } = latestChatOrderSlice.actions;\n\n//selector\n\nexport const useLatestChatOrderSelector = () => {\n  const latestChatOrder = useAppSelector(\n    (state: RootState) => state.latestChatOrder\n  );\n  return { latestChatOrder };\n};\n","import { useState, VFC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { addChat } from \"../../../functions/handler/addChat\";\nimport { login } from \"../../../functions/handler/login\";\nimport { deleteAllChats } from \"../../../functions/handler/deleteAllChats\";\nimport { addSeedData } from \"../../../functions/handler/addSeedData\";\nimport { useLatestChatOrderSelector } from \"../../../store/slices/latestChatOrderSlice\";\n\nexport const FirebaseActionArea: VFC = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(false);\n  const { latestChatOrder } = useLatestChatOrderSelector();\n\n  return (\n    <SActionArea>\n      <SUserName>ユーザー名</SUserName>\n      {isLogin ? (\n        <SUserNameText>{userName}</SUserNameText>\n      ) : (\n        <>\n          <SUserNameInput\n            value={userName}\n            onChange={(e) => setUserName(e.target.value)}\n            placeholder=\"ユーザー名を入力してください\"\n          ></SUserNameInput>\n          <SLoginButton onClick={() => login({ setIsLogin, userName })}>\n            ログイン\n          </SLoginButton>\n        </>\n      )}\n      <SText>テキスト</SText>\n      <STextInput\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        placeholder=\"テキストを入力してください\"\n      />\n      <SAddButton\n        onClick={() =>\n          addChat({\n            userName,\n            text,\n            setText,\n            isLogin,\n            latestChatOrder,\n          })\n        }\n      >\n        データ追加\n      </SAddButton>\n      <SAddSeedDataButton onClick={addSeedData}>\n        シードデータでリセット\n      </SAddSeedDataButton>\n      <SDeleteAllButton onClick={() => deleteAllChats()}>\n        データ全削除\n      </SDeleteAllButton>\n      <SDbUserName>ユーザー名</SDbUserName>\n      <SDbText>テキスト</SDbText>\n      <SDbTimestamp>作成日時</SDbTimestamp>\n      <SDbOrder>順番</SDbOrder>\n    </SActionArea>\n  );\n};\n\nconst SActionArea = styled.div`\n  display: grid;\n  grid-template-columns: 200px 200px 200px 200px;\n  grid-template-rows: 50px 50px 50px 50px;\n`;\n\nconst SUserName = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n`;\n\nconst SUserNameInput = styled.input`\n  grid-column-start: 2;\n  grid-column-end: 3;\n`;\n\nconst SLoginButton = styled.button`\n  grid-column-start: 3;\n  grid-column-end: 4;\n`;\n\nconst SUserNameText = styled.div`\n  grid-column-start: 2;\n  grid-column-end: 4;\n`;\n\nconst SText = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 2;\n  grid-row-end: 3;\n`;\n\nconst STextInput = styled.input`\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 2;\n  grid-row-end: 3;\n`;\n\nconst SAddButton = styled.button`\n  grid-row-start: 3;\n  grid-row-end: 4;\n`;\n\nconst SAddSeedDataButton = styled.button`\n  grid-column-start: 2;\n  grid-column-end: 3;\n  grid-row-start: 3;\n  grid-row-end: 4;\n`;\n\nconst SDeleteAllButton = styled.button`\n  grid-column-start: 3;\n  grid-column-end: 4;\n  grid-row-start: 3;\n  grid-row-end: 4;\n`;\n\nconst SDbUserName = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 4;\n  grid-row-end: 5;\n`;\n\nconst SDbText = styled.div`\n  grid-column-start: 2;\n  grid-column-end: 3;\n  grid-row-start: 4;\n  grid-row-end: 5;\n`;\n\nconst SDbTimestamp = styled.div`\n  grid-column-start: 3;\n  grid-column-end: 4;\n  grid-row-start: 4;\n  grid-row-end: 5;\n`;\n\nconst SDbOrder = styled.div`\n  grid-column-start: 4;\n  grid-column-end: 5;\n  grid-row-start: 4;\n  grid-row-end: 5;\n`;\n","type loginType = {\n    setIsLogin: React.Dispatch<React.SetStateAction<boolean>>;\n    userName: string;\n};\n\nexport const login = (props: loginType) => {\n    const { setIsLogin, userName } = props;\n    if (userName.length === 0) {\n        window.alert(\"ユーザー名を入力しないとログイン出来ません\");\n    } else {\n        setIsLogin(true);\n    }\n};\n","import moment from \"moment\";\nimport { push } from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\nimport { dbChatDataType } from \"../../assets/type/dataType\";\n\ntype propsType = {\n  userName: string;\n  text: string;\n  setText: React.Dispatch<React.SetStateAction<string>>;\n  isLogin: boolean;\n  latestChatOrder: number;\n};\n\nexport const addChat = (props: propsType) => {\n  const { userName, text, setText, isLogin, latestChatOrder } = props;\n  if (isLogin === false) {\n    window.alert(\"ログインしてください\");\n  } else if (text.length === 0) {\n    window.alert(\"テキストを入力してください\");\n  } else {\n    const timestamp = moment();\n    const postData: dbChatDataType = {\n      user_name: userName,\n      text: text,\n      createdAt: timestamp.format(\"YYYY-MM-DD HH:mm:ss\"),\n      order: latestChatOrder + 1,\n    };\n    push(chatRef, postData);\n    setText(\"\");\n  }\n};\n","import { set } from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\n\nexport const deleteAllChats = () => {\n  set(chatRef, {}).catch((error) => {\n    window.alert(\"データの削除時に問題が発生しました\");\n    console.log(error);\n  });\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { chatDataType } from \"../../assets/type/dataType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: chatDataType[] = [];\n\nexport const chatDataSlice = createSlice({\n  name: \"chatData\",\n  initialState: initialState,\n  reducers: {\n    setChatData: (state, action: PayloadAction<chatDataType[]>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const chatDataReducer = chatDataSlice.reducer;\n\n//action\nexport const { setChatData } = chatDataSlice.actions;\n\n//selector\nexport const useChatDataSelector = () => {\n  const chatData = useAppSelector((state: RootState) => state.chatData);\n  return { chatData };\n};\n","import {\n  bufChatDataType,\n  chatDataType,\n  dbChatDataType,\n} from \"../../../assets/type/dataType\";\n\nexport const convertChatData = (dbChatData: any) => {\n  //jsonを配列に変換\n  const bufChatData: bufChatDataType[] = Object.entries<dbChatDataType>(\n    dbChatData || {}\n  ).map(([key, value]) => ({\n    key: key,\n    value: value,\n  }));\n\n  //非破壊的に逆順に変更\n  const reversedBufChatData: bufChatDataType[] = [...bufChatData].reverse();\n\n  //valueを展開して見やすく変換\n  let newBufChatData: chatDataType[] = [];\n  reversedBufChatData.map((chat, index) => {\n    newBufChatData[index] = { ...chat.value, key: chat.key };\n    return 0;\n  });\n\n  return newBufChatData;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: boolean = false;\n\nexport const isChatsCompletedSlice = createSlice({\n  name: \"isChatsCompleted\",\n  initialState: initialState,\n  reducers: {\n    setIsChatsCompleted: (state, action: PayloadAction<boolean>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const isChatsCompletedReducer = isChatsCompletedSlice.reducer;\n\n//action\nexport const { setIsChatsCompleted } = isChatsCompletedSlice.actions;\n\n//selector\n\nexport const useIsChatsCompletedSelector = () => {\n  const isChatsCompleted = useAppSelector(\n    (state: RootState) => state.isChatsCompleted\n  );\n  return { isChatsCompleted };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nconst initialState: boolean = true;\n\nexport const hasMoreSlice = createSlice({\n  name: \"hasMore\",\n  initialState: initialState,\n  reducers: {\n    setHasMore: (state, action: PayloadAction<boolean>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const hasMoreReducer = hasMoreSlice.reducer;\n\n//action\nexport const { setHasMore } = hasMoreSlice.actions;\n\n//selector\n\nexport const useHasMoreSelector = () => {\n  const hasMore = useAppSelector((state: RootState) => state.hasMore);\n  return { hasMore };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { START_CHAT_ORDER } from \"../../assets/data/constNum\";\n\nconst initialState: number = START_CHAT_ORDER;\n\nexport const lastChatOrderSlice = createSlice({\n  name: \"lastChatOrder\",\n  initialState: initialState,\n  reducers: {\n    setLastChatOrder: (state, action: PayloadAction<number>) => {\n      return action.payload;\n    },\n  },\n});\n\n//reducer\nexport const lastChatOrderReducer = lastChatOrderSlice.reducer;\n\n//action\nexport const { setLastChatOrder } = lastChatOrderSlice.actions;\n\n//selector\n\nexport const useLastChatOrderSelector = () => {\n  const lastChatOrder = useAppSelector(\n    (state: RootState) => state.lastChatOrder\n  );\n  return { lastChatOrder };\n};\n","export const FETCH_CHAT_NUM = 40;\nexport const LOAD_CHAT_NUM = 10;\nexport const START_CHAT_ORDER = 1;\n","import InfiniteScroll from \"react-infinite-scroller\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nimport { CircularProgress } from \"@material-ui/core\";\n\nimport { useFetchData } from \"../../../hooks/useFetchData\";\nimport { useChatDataSelector } from \"../../../store/slices/chatDataSlice\";\nimport { useAppDispatch } from \"../../../hooks/useAppDispatch\";\nimport { loadMore } from \"../../../functions/handler/loadMore\";\nimport { useIsChatsCompletedSelector } from \"../../../store/slices/isChatsCompletedSlice\";\nimport { useHasMoreSelector } from \"../../../store/slices/hasMoreSlice\";\nimport { useLastChatOrderSelector } from \"../../../store/slices/lastChatOrderSlice\";\n\nexport const FirebaseChatDisplayArea = () => {\n  const { chatData } = useChatDataSelector();\n  const { hasMore } = useHasMoreSelector();\n  const { isChatsCompleted } = useIsChatsCompletedSelector();\n  const { lastChatOrder } = useLastChatOrderSelector();\n  const { dispatch } = useAppDispatch();\n\n  //初回時のみ実行、それ以降はDBに変更があった時のみ動作\n  useFetchData();\n\n  console.log(\"チャット表示領域のレンダリング\");\n\n  return (\n    <SChatListContainer>\n      {isChatsCompleted ? (\n        <InfiniteScroll\n          loadMore={() =>\n            loadMore({\n              dispatch,\n              chatData,\n              lastChatOrder,\n              hasMore,\n            })\n          }\n          hasMore={hasMore}\n          loader={<CircularProgress key={0} />}\n          initialLoad={false}\n          threshold={50}\n        >\n          {chatData.length === 0 ? (\n            <div>チャットはありません</div>\n          ) : (\n            chatData.map((item) => {\n              return (\n                <SChatContainer key={item.key}>\n                  <SContent>{item.user_name}</SContent>\n                  <SContent>{item.text}</SContent>\n                  <SContent>{moment(item.createdAt).fromNow()}</SContent>\n                  <SContent>{item.order}</SContent>\n                </SChatContainer>\n              );\n            })\n          )}\n        </InfiniteScroll>\n      ) : (\n        <CircularProgress />\n      )}\n    </SChatListContainer>\n  );\n};\n\nconst SChatListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SChatContainer = styled.div`\n  display: flex;\n`;\n\nconst SContent = styled.div`\n  width: 200px;\n`;\n","import {\n  limitToLast,\n  onValue,\n  orderByChild,\n  query,\n  Query,\n} from \"firebase/database\";\nimport { useEffect } from \"react\";\n\nimport { setChatData } from \"../store/slices/chatDataSlice\";\nimport { convertChatData } from \"../functions/features/chatData/convertChatData\";\nimport { useAppDispatch } from \"./useAppDispatch\";\nimport { chatRef } from \"..\";\nimport { setIsChatsCompleted } from \"../store/slices/isChatsCompletedSlice\";\nimport { setHasMore } from \"../store/slices/hasMoreSlice\";\nimport { setLatestChatOrder } from \"../store/slices/latestChatOrderSlice\";\nimport { setLastChatOrder } from \"../store/slices/lastChatOrderSlice\";\nimport { FETCH_CHAT_NUM, START_CHAT_ORDER } from \"../assets/data/constNum\";\n\nexport const useFetchData = () => {\n  const { dispatch } = useAppDispatch();\n  const chatQuery: Query = query(\n    chatRef,\n    orderByChild(\"order\"),\n    limitToLast(FETCH_CHAT_NUM)\n  );\n\n  useEffect(() => {\n    onValue(query(chatQuery), (snapshot) => {\n      console.log(\"チャットデータの取得\");\n      const newChatData = convertChatData(snapshot.val());\n      dispatch(setChatData(newChatData));\n\n      //一番最初と最後の番号を記録\n      if (newChatData.length === 0) {\n        dispatch(setLatestChatOrder(START_CHAT_ORDER - 1));\n        dispatch(setLastChatOrder(START_CHAT_ORDER));\n      } else {\n        const lastChatData = newChatData[newChatData.length - 1];\n        dispatch(setLatestChatOrder(newChatData[0].order));\n        dispatch(setLastChatOrder(lastChatData.order));\n      }\n\n      //更に読み込むページがあるかの判定\n      if (newChatData.length < FETCH_CHAT_NUM) {\n        dispatch(setHasMore(false));\n      } else {\n        dispatch(setHasMore(true));\n      }\n\n      dispatch(setIsChatsCompleted(true));\n    });\n    //dispatchに対して依存配列に入れるように警告がでるのでeslintを無効化\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n","import {\n  query,\n  limitToLast,\n  Query,\n  onValue,\n  endBefore,\n  orderByChild,\n} from \"firebase/database\";\n\nimport { chatRef } from \"../..\";\nimport { chatDataType } from \"../../assets/type/dataType\";\nimport { AppThunkDispatch } from \"../../assets/type/reduxType\";\nimport { setChatData } from \"../../store/slices/chatDataSlice\";\nimport { convertChatData } from \"../features/chatData/convertChatData\";\nimport { setHasMore } from \"../../store/slices/hasMoreSlice\";\nimport { setLastChatOrder } from \"../../store/slices/lastChatOrderSlice\";\nimport { LOAD_CHAT_NUM, START_CHAT_ORDER } from \"../../assets/data/constNum\";\n\ntype propsType = {\n  hasMore: boolean;\n  dispatch: AppThunkDispatch;\n  chatData: chatDataType[];\n  lastChatOrder: number;\n};\n\nexport const loadMore = (props: propsType) => {\n  console.log(\"loadMore\");\n  const { dispatch, chatData, lastChatOrder, hasMore } = props;\n  const chatQuery: Query = query(\n    chatRef,\n    orderByChild(\"order\"),\n    endBefore(lastChatOrder),\n    limitToLast(LOAD_CHAT_NUM + 1)\n  );\n\n  if (hasMore) {\n    onValue(\n      chatQuery,\n      (snapshot) => {\n        console.log(\"チャットデータの取得\");\n        const bufChatData: chatDataType[] = convertChatData(snapshot.val());\n        const newChatData = [...chatData, ...bufChatData];\n        dispatch(setChatData(newChatData));\n\n        if (newChatData.length !== 0) {\n          const lastChatData = newChatData[newChatData.length - 1];\n          if (lastChatData.order === START_CHAT_ORDER) {\n            console.log(\"終わり\");\n            dispatch(setHasMore(false));\n          }\n          dispatch(setLastChatOrder(lastChatData.order));\n        }\n      },\n      {\n        onlyOnce: true,\n      }\n    );\n  }\n};\n","import { VFC } from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport \"moment/locale/ja\";\n\nimport { FirebaseActionArea } from \"../organisms/FireBase/FirebaseActionArea\";\nimport { FirebaseChatDisplayArea } from \"../organisms/FireBase/FirebaseChatDisplayArea\";\n\nexport const FireBasePage1: VFC = () => {\n  moment.locale(\"ja\");\n\n  return (\n    <SComponentContainer>\n      <FirebaseActionArea />\n      <FirebaseChatDisplayArea />\n    </SComponentContainer>\n  );\n};\n\nconst SComponentContainer = styled.div`\n  text-align: center;\n`;\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\nimport styled from \"styled-components\";\n\nexport const TopHeader: VFC = () => {\n  return (\n    <SComponentContaier>\n      <Link to={pathData.reduxPage1}>Redux</Link>\n      <Link to={pathData.reduxThunkPage1}>ReduxThunk</Link>\n      <Link to={pathData.fireBasePage1}>FireBase</Link>\n    </SComponentContaier>\n  );\n};\n\nconst SComponentContaier = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n","import { AnyAction } from \"redux\";\nimport { createSlice, PayloadAction, ThunkAction } from \"@reduxjs/toolkit\";\n\nimport { AppThunkDispatch, RootState } from \"../../assets/type/reduxType\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\n\nexport type userDataType = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    geo: {\n      lat: string;\n      lng: string;\n    };\n  };\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n};\n\nconst initialState: userDataType[] = [];\n\nexport const userDataSlice = createSlice({\n  name: \"userData\",\n  initialState: initialState,\n  reducers: {\n    setUsers: (state, action: PayloadAction<userDataType[]>) => {\n      // state = action.payload; だめ？\n      return action.payload;\n    },\n  },\n});\n\nexport const getUsers = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  AnyAction\n> => {\n  return async (dispatch: AppThunkDispatch) => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data: userDataType[] = await res.json();\n    dispatch(setUsers(data));\n  };\n};\n\n//action\nexport const { setUsers } = userDataSlice.actions;\n\n//selector\nexport const useUserDataSelector = () => {\n  const userData = useAppSelector((state: RootState) => state.userData);\n  return { userData };\n};\n\n//reducer\nexport const userDataReducer = userDataSlice.reducer;\n","import { VFC } from \"react\";\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport {\n  getUsers,\n  setUsers,\n  useUserDataSelector,\n} from \"../../store/slices/userData\";\n\nexport const ReduxThunkPage1: VFC = () => {\n  const { userData } = useUserDataSelector();\n  const { dispatch } = useAppDispatch();\n\n  return (\n    <div>\n      <button onClick={() => dispatch(getUsers())}>フェッチデータ</button>\n      <button onClick={() => dispatch(setUsers([]))}>データクリア</button>\n      {userData &&\n        userData.map((user, index) => <div key={index}>{user.name}</div>)}\n    </div>\n  );\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const GoToTopHeader: VFC = () => {\n  return <Link to={pathData.top}>Top</Link>;\n};\n","import { VFC } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { ReduxHeader } from \"../components/organisms/ReduxHeader\";\nimport { ReduxPage1 } from \"../components/pages/ReduxPage1\";\nimport { ReduxPage2 } from \"../components/pages/ReduxPage2\";\nimport { Top } from \"../components/pages/Top\";\nimport { FireBasePage1 } from \"../components/pages/FireBasePage1\";\nimport { TopHeader } from \"../components/organisms/TopHeader\";\n\nimport { pathData } from \"../assets/data/pathData\";\nimport { ReduxThunkPage1 } from \"../components/pages/ReduxThunkPage1\";\nimport { GoToTopHeader } from \"../components/organisms/GoToTopHeader\";\n\nexport const ComponentRouter: VFC = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path={pathData.top}>\n          <TopHeader />\n          <Top />\n        </Route>\n        <Route path={pathData.fireBasePage1}>\n          <GoToTopHeader />\n          <FireBasePage1 />\n        </Route>\n        <Route path={pathData.reduxPage1}>\n          <ReduxHeader />\n          <ReduxPage1 />\n        </Route>\n        <Route path={pathData.reduxPage2}>\n          <ReduxHeader />\n          <ReduxPage2 />\n        </Route>\n        <Route path={pathData.reduxThunkPage1}>\n          <GoToTopHeader />\n          <ReduxThunkPage1 />\n        </Route>\n        <Route path=\"*\">\n          <Redirect to={{ pathname: pathData.top }} />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\n\nimport { chatDataReducer } from \"./slices/chatDataSlice\";\nimport { counterReducer } from \"./slices/counterSlice\";\nimport { isChatsCompletedReducer } from \"./slices/isChatsCompletedSlice\";\nimport { hasMoreReducer } from \"./slices/hasMoreSlice\";\nimport { latestChatOrderReducer } from \"./slices/latestChatOrderSlice\";\nimport { lastChatOrderReducer } from \"./slices/lastChatOrderSlice\";\nimport { userDataReducer } from \"./slices/userData\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    chatData: chatDataReducer,\n    isChatsCompleted: isChatsCompletedReducer,\n    hasMore: hasMoreReducer,\n    latestChatOrder: latestChatOrderReducer,\n    lastChatOrder: lastChatOrderReducer,\n    userData: userDataReducer,\n  },\n  middleware: [thunk],\n});\n","import { VFC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { ComponentRouter } from \"./router/ComponentRouter\";\nimport { store } from \"./store/store\";\n\nexport const App: VFC = () => {\n    return (\n        <SComponentContainer>\n            <Provider store={store}>\n                <ComponentRouter />\n            </Provider>\n        </SComponentContainer>\n    );\n};\n\nconst SComponentContainer = styled.div`\n    background-color: skyblue;\n    min-height: 100vh;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { initializeApp } from \"firebase/app\";\n\nimport { App } from \"./App\";\n\nimport { firebaseConfig } from \"./config\";\nimport { getChatRef } from \"./functions/getChatRef\";\n\nexport const app = initializeApp(firebaseConfig);\nexport const chatRef = getChatRef(app);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyCLifYdh2b-V9WzIK1X3cL9gRoI_q5UC24\",\n    authDomain: \"chat-app-86125.firebaseapp.com\",\n    databaseURL:\n        \"https://chat-app-86125-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"chat-app-86125\",\n    storageBucket: \"chat-app-86125.appspot.com\",\n    messagingSenderId: \"717771492231\",\n    appId: \"1:717771492231:web:4019216ccf20fc5052e122\",\n    measurementId: \"G-BQCX5GM9PP\",\n};\n","import { FirebaseApp } from \"firebase/app\";\nimport {\n    getDatabase,\n    Database,\n    ref,\n    DatabaseReference,\n} from \"firebase/database\";\n\nexport const getChatRef = (app: FirebaseApp) => {\n    //データベースの取得\n    const db: Database = getDatabase(app);\n    //データベース上のチャットへの参照を取得\n    const chatRef: DatabaseReference = ref(db, \"chats\");\n    return chatRef;\n};\n"],"sourceRoot":""}