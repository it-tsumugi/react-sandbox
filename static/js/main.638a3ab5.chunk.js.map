{"version":3,"sources":["assets/data/pathData.ts","components/organisms/ReduxHeader.tsx","store/hooks.ts","store/slices/counterSlice.ts","components/pages/ReduxPage1.tsx","components/pages/ReduxPage2.tsx","components/pages/Top.tsx","store/slices/chatDataSlice.ts","components/pages/FireBasePage1.tsx","hooks/useFetchData.ts","function/addUser.ts","components/organisms/TopHeader.tsx","components/organisms/FireBaseHeader.tsx","router/ComponentRouter.tsx","store/store.ts","App.tsx","index.tsx","config.ts"],"names":["pathData","ReduxHeader","to","useAppSelector","useSelector","useAppDispatch","useDispatch","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","useCountSelector","count","counter","counterReducer","reducer","ReduxPage1","dispatch","useState","incrementAmount","setIncrementAmount","onClick","onChange","e","Number","target","ReduxPage2","Top","chatDataSlice","setChatData","chatDataReducer","FireBasePage1","userName","setUserName","text","setText","chatData","moment","locale","useEffect","chatRef","ref","db","onValue","snapshot","console","log","exists","dbData","val","bufChatData","Object","entries","map","key","useFetchData","SComponentContainer","SActionArea","SUserName","SUserNameInput","placeholder","SText","STextInput","SButton","props","length","postData","user_name","createAt","format","dbRef","push","window","alert","addUser","SDbUserName","SDbText","SDbTimestamp","SChatListContainer","CircularProgress","item","index","SChatContainer","style","order","SContent","fromNow","styled","div","input","button","TopHeader","FireBaseHeader","ComponentRouter","basename","process","exact","path","pathname","store","configureStore","App","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getDatabase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.638a3ab5.chunk.js","sourcesContent":["export const pathData = {\n    top: \"/top\",\n\n    redux: \"redux\",\n    reduxPage1: \"/redux-page1\",\n    reduxPage2: \"/redux-page2\",\n\n    fireBasePage1: \"/fire-base-page1\",\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const ReduxHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n            <Link to={pathData.reduxPage1}>Page1</Link>\n            <Link to={pathData.reduxPage2}>Page2</Link>\n        </>\n    );\n};\n","import { TypedUseSelectorHook, useSelector, useDispatch } from \"react-redux\";\n\nimport { RootState, AppDispatch } from \"./reduxType\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../reduxType\";\nimport { useAppSelector } from \"../hooks\";\n\ntype counterType = {\n    value: number;\n    status: \"idle\" | \"loading\" | \"failed\";\n};\n\nconst initialState: counterType = {\n    value: 0,\n    status: \"idle\",\n};\n\nexport const counterSlice = createSlice({\n    name: \"counter\",\n    initialState: initialState,\n    reducers: {\n        increment: (state) => {\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action: PayloadAction<number>) => {\n            state.value += action.payload;\n        },\n    },\n});\n\n//action\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n//selector\nexport const useCountSelector = () => {\n    const count = useAppSelector((state: RootState) => state.counter.value);\n    return { count };\n};\n\n//reducer\nexport const counterReducer = counterSlice.reducer;\n","import { useState, VFC } from \"react\";\n\nimport { useAppDispatch } from \"../../store/hooks\";\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    useCountSelector,\n} from \"../../store/slices/counterSlice\";\n\nexport const ReduxPage1: VFC = () => {\n    const dispatch = useAppDispatch();\n    const { count } = useCountSelector();\n    const [incrementAmount, setIncrementAmount] = useState(2);\n\n    return (\n        <>\n            <div>Page1</div>\n            <button onClick={() => dispatch(increment())}>\n                インクリメント\n            </button>\n            <button onClick={() => dispatch(decrement())}>デクリメント</button>\n            <input\n                value={incrementAmount}\n                onChange={(e) => setIncrementAmount(Number(e.target.value))}\n            />\n            <button\n                onClick={() => dispatch(incrementByAmount(incrementAmount))}\n            >\n                数値分インクリメント\n            </button>\n            <div>{count}</div>\n        </>\n    );\n};\n","import { useState, VFC } from \"react\";\nimport { useAppDispatch } from \"../../store/hooks\";\n\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    useCountSelector,\n} from \"../../store/slices/counterSlice\";\n\nexport const ReduxPage2: VFC = () => {\n    const dispatch = useAppDispatch();\n    const { count } = useCountSelector();\n    const [incrementAmount, setIncrementAmount] = useState(2);\n\n    return (\n        <>\n            <div>Page2</div>\n            <button onClick={() => dispatch(increment())}>\n                インクリメント\n            </button>\n            <button onClick={() => dispatch(decrement())}>デクリメント</button>\n            <input\n                value={incrementAmount}\n                onChange={(e) => setIncrementAmount(Number(e.target.value))}\n            />\n            <button\n                onClick={() => dispatch(incrementByAmount(incrementAmount))}\n            >\n                数値分インクリメント\n            </button>\n            <div>{count}</div>\n        </>\n    );\n};\n","import { VFC } from \"react\";\n\nexport const Top: VFC = () => {\n    return <div>Top</div>;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState, stateStatusType } from \"../reduxType\";\nimport { useAppSelector } from \"../hooks\";\nimport { chatDataType } from \"../../assets/type/dataType\";\n\ntype chatDataStateType = {\n    value: chatDataType[];\n    status: stateStatusType;\n};\n\nconst initialState: chatDataStateType = {\n    value: [],\n    status: \"loading\",\n};\n\nexport const chatDataSlice = createSlice({\n    name: \"chatData\",\n    initialState: initialState,\n    reducers: {\n        setChatData: (state, action: PayloadAction<chatDataType[]>) => {\n            state.value = action.payload;\n            state.status = \"idle\";\n        },\n    },\n});\n\n//reducer\nexport const chatDataReducer = chatDataSlice.reducer;\n\n//action\nexport const { setChatData } = chatDataSlice.actions;\n\n//selector\nexport const useChatDataSelector = () => {\n    const chatData = useAppSelector((state: RootState) => state.chatData);\n    return { chatData };\n};\n","import moment from \"moment\";\nimport { useState, VFC } from \"react\";\nimport styled from \"styled-components\";\nimport \"moment/locale/ja\";\n\nimport { CircularProgress } from \"@material-ui/core\";\n\nimport { useChatDataSelector } from \"../../store/slices/chatDataSlice\";\nimport { addUser } from \"../../function/addUser\";\nimport { useFetchData } from \"../../hooks/useFetchData\";\n\nexport const FireBasePage1: VFC = () => {\n    const [userName, setUserName] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const { chatData } = useChatDataSelector();\n    moment.locale(\"ja\");\n    useFetchData();\n    console.log(\"レンダリング\");\n\n    return (\n        <SComponentContainer>\n            <SActionArea>\n                <SUserName>ユーザー名</SUserName>\n                <SUserNameInput\n                    value={userName}\n                    onChange={(e) => setUserName(e.target.value)}\n                    placeholder=\"ユーザー名を入力してください\"\n                ></SUserNameInput>\n                <SText>テキスト</SText>\n                <STextInput\n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                    placeholder=\"テキストを入力してください\"\n                />\n                <SButton\n                    onClick={() =>\n                        addUser({ userName, text, setUserName, setText })\n                    }\n                >\n                    データ追加\n                </SButton>\n                <SDbUserName>ユーザー名</SDbUserName>\n                <SDbText>テキスト</SDbText>\n                <SDbTimestamp>作成日時</SDbTimestamp>\n            </SActionArea>\n            <SChatListContainer>\n                {chatData.status === \"loading\" ? (\n                    <CircularProgress />\n                ) : (\n                    chatData.value.map((item, index) => {\n                        return (\n                            <SChatContainer\n                                key={item.key}\n                                style={{ order: -index }}\n                            >\n                                <SContent>{item.value.user_name}</SContent>\n                                <SContent>{item.value.text}</SContent>\n                                <SContent>\n                                    {moment(item.value.createAt).fromNow()}\n                                </SContent>\n                            </SChatContainer>\n                        );\n                    })\n                )}\n            </SChatListContainer>\n        </SComponentContainer>\n    );\n};\n\nconst SComponentContainer = styled.div`\n    text-align: center;\n`;\n\nconst SActionArea = styled.div`\n    display: grid;\n    grid-template-columns: 150px 150px 150px;\n    grid-template-rows: 50px 50px 50px 50px;\n`;\n\nconst SUserName = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n`;\n\nconst SUserNameInput = styled.input`\n    grid-column-start: 2;\n    grid-column-end: 4;\n`;\n\nconst SText = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n`;\n\nconst STextInput = styled.input`\n    grid-column-start: 2;\n    grid-column-end: 4;\n    grid-row-start: 2;\n    grid-row-end: 3;\n`;\n\nconst SButton = styled.button`\n    grid-row-start: 3;\n    grid-row-end: 4;\n`;\n\nconst SDbUserName = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 4;\n    grid-row-end: 5;\n`;\n\nconst SDbText = styled.div`\n    grid-column-start: 2;\n    grid-column-end: 3;\n    grid-row-start: 4;\n    grid-row-end: 5;\n`;\n\nconst SDbTimestamp = styled.div`\n    grid-column-start: 3;\n    grid-column-end: 4;\n    grid-row-start: 4;\n    grid-row-end: 5;\n`;\n\nconst SChatListContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst SChatContainer = styled.div`\n    display: flex;\n`;\n\nconst SContent = styled.div`\n    width: 150px;\n`;\n","import { DatabaseReference, onValue, ref } from \"firebase/database\";\nimport { useEffect } from \"react\";\n\nimport { chatDataType, dbDataType } from \"../assets/type/dataType\";\nimport { useAppDispatch } from \"../store/hooks\";\nimport { setChatData } from \"../store/slices/chatDataSlice\";\nimport { db } from \"../index\";\n\nexport const useFetchData = () => {\n    const dispatch = useAppDispatch();\n    useEffect(() => {\n        const chatRef: DatabaseReference = ref(db, \"users\");\n        onValue(chatRef, (snapshot) => {\n            console.log(\"データを取ってくる\");\n            if (snapshot.exists()) {\n                const dbData = snapshot.val();\n                const bufChatData: chatDataType[] = Object.entries<dbDataType>(\n                    dbData || {}\n                ).map(([key, value]) => ({\n                    key: key,\n                    value: value,\n                }));\n                dispatch(setChatData(bufChatData));\n            } else {\n                console.log(\"データがありません\");\n            }\n        });\n    }, [dispatch]);\n};\n","import moment from \"moment\";\nimport { push, ref } from \"firebase/database\";\n\nimport { db } from \"../index\";\n\ntype addUserType = {\n    userName: string;\n    text: string;\n    setUserName: React.Dispatch<React.SetStateAction<string>>;\n    setText: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const addUser = (props: addUserType) => {\n    const { userName, text, setUserName, setText } = props;\n    if (userName.length !== 0 && text.length !== 0) {\n        moment.locale(\"ja\");\n        let timestamp = moment();\n        const postData = {\n            user_name: userName,\n            text: text,\n            createAt: timestamp.format(\"YYYY-MM-DD HH:mm:ss\"),\n        };\n        const dbRef = ref(db, \"users/\");\n        push(dbRef, postData);\n        setUserName(\"\");\n        setText(\"\");\n    } else {\n        window.alert(\"ユーザー名とテキストを入力してください\");\n    }\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const TopHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n            <Link to={pathData.reduxPage1}>Redux</Link>\n            <Link to={pathData.fireBasePage1}>FireBase</Link>\n        </>\n    );\n};\n","import { VFC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathData } from \"../../assets/data/pathData\";\n\nexport const FireBaseHeader: VFC = () => {\n    return (\n        <>\n            <Link to={pathData.top}>Top</Link>\n        </>\n    );\n};\n","import { VFC } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { ReduxHeader } from \"../components/organisms/ReduxHeader\";\nimport { ReduxPage1 } from \"../components/pages/ReduxPage1\";\nimport { ReduxPage2 } from \"../components/pages/ReduxPage2\";\nimport { Top } from \"../components/pages/Top\";\nimport { FireBasePage1 } from \"../components/pages/FireBasePage1\";\nimport { TopHeader } from \"../components/organisms/TopHeader\";\nimport { FireBaseHeader } from \"../components/organisms/FireBaseHeader\";\n\nimport { pathData } from \"../assets/data/pathData\";\n\nexport const ComponentRouter: VFC = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path={pathData.top}>\n                    <TopHeader />\n                    <Top />\n                </Route>\n                <Route path={pathData.fireBasePage1}>\n                    <FireBaseHeader />\n                    <FireBasePage1 />\n                </Route>\n                <Route path={pathData.reduxPage1}>\n                    <ReduxHeader />\n                    <ReduxPage1 />\n                </Route>\n                <Route path={pathData.reduxPage2}>\n                    <ReduxHeader />\n                    <ReduxPage2 />\n                </Route>\n                <Route path=\"*\">\n                    <Redirect to={{ pathname: pathData.top }} />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { chatDataReducer } from \"./slices/chatDataSlice\";\nimport { counterReducer } from \"./slices/counterSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        counter: counterReducer,\n        chatData: chatDataReducer,\n    },\n});\n","import { VFC } from \"react\";\nimport { Provider } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { ComponentRouter } from \"./router/ComponentRouter\";\nimport { store } from \"./store/store\";\n\nexport const App: VFC = () => {\n    return (\n        <SComponentContainer>\n            <Provider store={store}>\n                <ComponentRouter />\n            </Provider>\n        </SComponentContainer>\n    );\n};\n\nconst SComponentContainer = styled.div`\n    background-color: skyblue;\n    min-height: 100vh;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport { getDatabase } from \"firebase/database\";\nimport { initializeApp } from \"firebase/app\";\nimport { firebaseConfig } from \"./config\";\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nexport const db = getDatabase();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyCLifYdh2b-V9WzIK1X3cL9gRoI_q5UC24\",\n    authDomain: \"chat-app-86125.firebaseapp.com\",\n    databaseURL:\n        \"https://chat-app-86125-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"chat-app-86125\",\n    storageBucket: \"chat-app-86125.appspot.com\",\n    messagingSenderId: \"717771492231\",\n    appId: \"1:717771492231:web:4019216ccf20fc5052e122\",\n    measurementId: \"G-BQCX5GM9PP\",\n};\n"],"sourceRoot":""}